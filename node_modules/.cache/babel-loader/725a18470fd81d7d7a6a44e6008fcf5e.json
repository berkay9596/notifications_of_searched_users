{"ast":null,"code":"import axios from \"axios\"; //var axios = require('axios')\n\nconst DEFAULT_NODE_URL = \"https://node.deso.org/api\"; //const DEFAULT_NODE_URL = \"https://api.desodev.com/api\"\n\nlet client = null;\n\nclass DesoApi {\n  constructor() {\n    this.client = null;\n    this.baseUrl = DEFAULT_NODE_URL;\n  }\n\n  async getPostsForPublicKey(username, publicKey, lastPostHashHex) {\n    let numToFetch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;\n\n    if (!username && !publicKey) {\n      console.log(\"username or publicKey is required\");\n      return;\n    }\n\n    const path = \"/v0/get-posts-for-public-key\";\n    const data = {\n      PublicKeyBase58Check: publicKey,\n      Username: username,\n      ReaderPublicKeyBase58Check: \"\",\n      LastPostHashHex: lastPostHashHex,\n      NumToFetch: numToFetch,\n      MediaRequired: false\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getSingleProfile(publicKey) {\n    const path = \"/v0/get-single-profile\";\n    const data = {\n      PublicKeyBase58Check: publicKey\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getSinglePost(postHash) {\n    let commentLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;\n    let fetchParents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let commentOffset = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let addGlobalFeedBool = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n    if (!postHash) {\n      console.log(\"postHash is required\");\n      return;\n    }\n\n    const path = \"/v0/get-single-post\";\n    const data = {\n      PostHashHex: postHash,\n      ReaderPublicKeyBase58Check: \"\",\n      FetchParents: fetchParents,\n      CommentOffset: commentOffset,\n      CommentLimit: commentLimit,\n      AddGlobalFeedBool: addGlobalFeedBool\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async uploadVideo() {\n    const path = \"/v0/upload-video\";\n\n    try {\n      const result = await this.getClient().post(path);\n      console.log(\"result\", result);\n      return result;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async submitPost(publicKey, body, postExtraData) {\n    if (!publicKey) {\n      console.log(\"publicKey is required\");\n      return;\n    }\n\n    if (!body) {\n      console.log(\"body is required\");\n      return;\n    }\n\n    const path = \"/v0/submit-post\";\n    const data = {\n      UpdaterPublicKeyBase58Check: publicKey,\n      PostHashHexToModify: \"\",\n      ParentStakeID: \"\",\n      Title: \"\",\n      BodyObj: {\n        Body: body,\n        ImageURLs: []\n      },\n      RecloutedPostHashHex: \"\",\n      PostExtraData: postExtraData,\n      Sub: \"\",\n      IsHidden: false,\n      MinFeeRateNanosPerKB: 1000\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async createLike(isUnlike, LikedPostHashHex, MinFeeRateNanosPerKB, publicKey) {\n    const path = \"/v0/create-like-stateless\";\n    const data = {\n      isUnlike: isUnlike,\n      LikedPostHashHex: LikedPostHashHex,\n      MinFeeRateNanosPerKB: MinFeeRateNanosPerKB,\n      ReaderPublicKeyBase58Check: publicKey\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async uploadImage(file, jwt, publicKey) {\n    const path = \"/v0/upload-image\";\n    const data = {\n      file: file,\n      UserPublicKeyBase58Check: publicKey,\n      JWT: jwt\n    };\n\n    try {\n      const result = await this.getClient().post(path, data, {\n        headers: {\n          'content-type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'\n        }\n      });\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async sendBitclout(publicKey) {\n    const path = \"/v0/send-deso\";\n    const data = {\n      MinFeeRateNanosPerKB: 1000,\n      AmountNanos: 100000,\n      SenderPublicKeyBase58Check: publicKey,\n      RecipientPublicKeyOrUsername: \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\"\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async makeThePostNft(NFTPostHashHex, publicKey) {\n    const path = \"/v0/create-nft\";\n    const data = {\n      AdditionalCoinRoyaltiesMap: {},\n      AdditionalDESORoyaltiesMap: {},\n      BuyNowPriceNanos: 0,\n      HasUnlockable: false,\n      IsForSale: false,\n      MinBidAmountNanos: 0,\n      MinFeeRateNanosPerKB: 1000,\n      NFTPostHashHex: NFTPostHashHex,\n      NFTRoyaltyToCoinBasisPoints: 1000,\n      NFTRoyaltyToCreatorBasisPoints: 500,\n      NumCopies: 1,\n      UpdaterPublicKeyBase58Check: publicKey\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getPosts() {\n    const path = \"/v0/get-posts-stateless\";\n    const data = {\n      AddGlobalFeedBool: false,\n      FetchSubcomments: false,\n      GetPostsByDESO: false,\n      GetPostsForFollowFeed: false,\n      GetPostsForGlobalWhitelist: true,\n      MediaRequired: false,\n      NumToFetch: 5000,\n      OrderBy: \"\",\n      PostContent: \"\",\n      PostHashHex: \"\",\n      PostsByDESOMinutesLookback: 0,\n      ReaderPublicKeyBase58Check: \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\",\n      StartTstampSecs: null\n    };\n\n    try {\n      var _result$data, _result$data$PostsFou;\n\n      const result = await this.getClient().post(path, data);\n      return result === null || result === void 0 ? void 0 : (_result$data = result.data) === null || _result$data === void 0 ? void 0 : (_result$data$PostsFou = _result$data.PostsFound) === null || _result$data$PostsFou === void 0 ? void 0 : _result$data$PostsFou.map(post => post.PostHashHex);\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async transferNft(publicKey, postHashHex) {\n    const path = \"/v0/transfer-nft\";\n    const data = {\n      MinFeeRateNanosPerKB: 1000,\n      NFTPostHashHex: postHashHex,\n      ReceiverPublicKeyBase58Check: \"BC1YLh9EQ1Lv38dswCDvxSFEEMHH7LKv2jocWwHTcvUx5ck4zuTVhGF\",\n      SenderPublicKeyBase58Check: publicKey,\n      SerialNumber: 1\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getNotifications(publicKey) {\n    const path = \"/v0/get-notifications\";\n    const data = {\n      PublicKeyBase58Check: publicKey,\n      FetchStartIndex: -1,\n      NumToFetch: 20,\n      FilteredOutNotificationCategories: {}\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async submitTransaction(signedTransactionHex) {\n    if (!signedTransactionHex) {\n      console.log(\"signedTransactionHex is required\");\n      return;\n    }\n\n    const path = \"/v0/submit-transaction\";\n    const data = {\n      TransactionHex: signedTransactionHex\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  } // async getUsersStateless(publicKeyList, skipForLeaderboard) {\n  //   if (!publicKeyList) {\n  //     console.log(\"publicKeyList is required\");\n  //     return;\n  //   }\n  //   const path = \"/v0/get-users-stateless\";\n  //   const data = {\n  //     PublicKeysBase58Check: publicKeyList,\n  //     SkipForLeaderboard: skipForLeaderboard,\n  //   };\n  //   try {\n  //     const result = await this.getClient().post(path, data);\n  //     return result.data;\n  //   } catch (error) {\n  //     console.log(error);\n  //     return null;\n  //   }\n  // }\n\n\n  async createFollow(followerPublicKey, followedPublicKey) {\n    const path = \"/v0/create-follow-txn-stateless\";\n    const data = {\n      FollowedPublicKeyBase58Check: followedPublicKey,\n      FollowerPublicKeyBase58Check: followerPublicKey,\n      IsUnfollow: false,\n      MinFeeRateNanosPerKB: 1000\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getProfilesPartialMatch() {\n    const path = \"/v0/get-profiles\";\n    const data = {\n      NumToFetch: 100,\n      ReaderPublicKeyBase58Check: \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\"\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async getUsersStateless(PublicKeysBase58Check) {\n    const path = \"/v0/get-users-stateless\";\n    const data = {\n      PublicKeysBase58Check: PublicKeysBase58Check\n    };\n\n    try {\n      const result = await this.getClient().post(path, data);\n      return result.data;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  getClient() {\n    if (client) return client;\n    client = axios.create({\n      baseURL: this.baseUrl,\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    return client;\n  }\n\n}\n\nexport default DesoApi;","map":{"version":3,"sources":["C:/Users/PC/Desktop/notifications app/src/libs/desoApi.jsx"],"names":["axios","DEFAULT_NODE_URL","client","DesoApi","constructor","baseUrl","getPostsForPublicKey","username","publicKey","lastPostHashHex","numToFetch","console","log","path","data","PublicKeyBase58Check","Username","ReaderPublicKeyBase58Check","LastPostHashHex","NumToFetch","MediaRequired","result","getClient","post","error","getSingleProfile","getSinglePost","postHash","commentLimit","fetchParents","commentOffset","addGlobalFeedBool","PostHashHex","FetchParents","CommentOffset","CommentLimit","AddGlobalFeedBool","uploadVideo","submitPost","body","postExtraData","UpdaterPublicKeyBase58Check","PostHashHexToModify","ParentStakeID","Title","BodyObj","Body","ImageURLs","RecloutedPostHashHex","PostExtraData","Sub","IsHidden","MinFeeRateNanosPerKB","createLike","isUnlike","LikedPostHashHex","uploadImage","file","jwt","UserPublicKeyBase58Check","JWT","headers","sendBitclout","AmountNanos","SenderPublicKeyBase58Check","RecipientPublicKeyOrUsername","makeThePostNft","NFTPostHashHex","AdditionalCoinRoyaltiesMap","AdditionalDESORoyaltiesMap","BuyNowPriceNanos","HasUnlockable","IsForSale","MinBidAmountNanos","NFTRoyaltyToCoinBasisPoints","NFTRoyaltyToCreatorBasisPoints","NumCopies","getPosts","FetchSubcomments","GetPostsByDESO","GetPostsForFollowFeed","GetPostsForGlobalWhitelist","OrderBy","PostContent","PostsByDESOMinutesLookback","StartTstampSecs","PostsFound","map","transferNft","postHashHex","ReceiverPublicKeyBase58Check","SerialNumber","getNotifications","FetchStartIndex","FilteredOutNotificationCategories","submitTransaction","signedTransactionHex","TransactionHex","createFollow","followerPublicKey","followedPublicKey","FollowedPublicKeyBase58Check","FollowerPublicKeyBase58Check","IsUnfollow","getProfilesPartialMatch","getUsersStateless","PublicKeysBase58Check","create","baseURL","Accept"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n//var axios = require('axios')\r\n\r\nconst DEFAULT_NODE_URL = \"https://node.deso.org/api\";\r\n//const DEFAULT_NODE_URL = \"https://api.desodev.com/api\"\r\nlet client = null;\r\nclass DesoApi {\r\n  constructor() {\r\n    this.client = null;\r\n    this.baseUrl = DEFAULT_NODE_URL;\r\n  }\r\n\r\n  async getPostsForPublicKey(\r\n    username,\r\n    publicKey,\r\n    lastPostHashHex,\r\n    numToFetch = 10\r\n  ) {\r\n    if (!username && !publicKey) {\r\n      console.log(\"username or publicKey is required\");\r\n      return;\r\n    }\r\n\r\n    const path = \"/v0/get-posts-for-public-key\";\r\n    const data = {\r\n      PublicKeyBase58Check: publicKey,\r\n      Username: username,\r\n      ReaderPublicKeyBase58Check: \"\",\r\n      LastPostHashHex: lastPostHashHex,\r\n      NumToFetch: numToFetch,\r\n      MediaRequired: false,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getSingleProfile(publicKey) {\r\n\r\n    const path = \"/v0/get-single-profile\";\r\n    const data = {\r\n      PublicKeyBase58Check: publicKey\r\n    };\r\n\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async getSinglePost(\r\n    postHash,\r\n    commentLimit = 20,\r\n    fetchParents = false,\r\n    commentOffset = 0,\r\n    addGlobalFeedBool = false\r\n  ) {\r\n    if (!postHash) {\r\n      console.log(\"postHash is required\");\r\n      return;\r\n    }\r\n\r\n    const path = \"/v0/get-single-post\";\r\n    const data = {\r\n      PostHashHex: postHash,\r\n      ReaderPublicKeyBase58Check: \"\",\r\n      FetchParents: fetchParents,\r\n      CommentOffset: commentOffset,\r\n      CommentLimit: commentLimit,\r\n      AddGlobalFeedBool: addGlobalFeedBool,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async uploadVideo() {\r\n\r\n    const path = \"/v0/upload-video\";\r\n    try {\r\n      const result = await this.getClient().post(path);\r\n      console.log(\"result\",result)\r\n      return result\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async submitPost(publicKey, body, postExtraData) {\r\n    if (!publicKey) {\r\n      console.log(\"publicKey is required\");\r\n      return;\r\n    }\r\n\r\n    if (!body) {\r\n      console.log(\"body is required\");\r\n      return;\r\n    }\r\n\r\n    const path = \"/v0/submit-post\";\r\n    const data = {\r\n      UpdaterPublicKeyBase58Check: publicKey,\r\n      PostHashHexToModify: \"\",\r\n      ParentStakeID: \"\",\r\n      Title: \"\",\r\n      BodyObj: { Body: body, ImageURLs: [] },\r\n      RecloutedPostHashHex: \"\",\r\n      PostExtraData: postExtraData,\r\n      Sub: \"\",\r\n      IsHidden: false,\r\n      MinFeeRateNanosPerKB: 1000,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async createLike(\r\n    isUnlike,\r\n    LikedPostHashHex,\r\n    MinFeeRateNanosPerKB,\r\n    publicKey\r\n  ) {\r\n    const path = \"/v0/create-like-stateless\";\r\n    const data = {\r\n      isUnlike: isUnlike,\r\n      LikedPostHashHex: LikedPostHashHex,\r\n      MinFeeRateNanosPerKB: MinFeeRateNanosPerKB,\r\n      ReaderPublicKeyBase58Check: publicKey,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async uploadImage(file,jwt,publicKey) {\r\n    const path = \"/v0/upload-image\";\r\n    const data = {\r\n      file: file,\r\n      UserPublicKeyBase58Check: publicKey,\r\n      JWT: jwt\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data,{headers: {'content-type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW'}});\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async sendBitclout(publicKey) {\r\n    const path = \"/v0/send-deso\";\r\n    const data = {\r\n      MinFeeRateNanosPerKB: 1000,\r\n      AmountNanos: 100000,\r\n      SenderPublicKeyBase58Check: publicKey,\r\n      RecipientPublicKeyOrUsername:\r\n        \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\",\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  async makeThePostNft(NFTPostHashHex, publicKey) {\r\n    const path = \"/v0/create-nft\";\r\n    const data = {\r\n      AdditionalCoinRoyaltiesMap: {},\r\n      AdditionalDESORoyaltiesMap: {},\r\n      BuyNowPriceNanos: 0,\r\n      HasUnlockable: false,\r\n      IsForSale: false,\r\n      MinBidAmountNanos: 0,\r\n      MinFeeRateNanosPerKB: 1000,\r\n      NFTPostHashHex: NFTPostHashHex,\r\n      NFTRoyaltyToCoinBasisPoints: 1000,\r\n      NFTRoyaltyToCreatorBasisPoints: 500,\r\n      NumCopies: 1,\r\n      UpdaterPublicKeyBase58Check: publicKey,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async getPosts() {\r\n    const path = \"/v0/get-posts-stateless\";\r\n    const data = {\r\n      AddGlobalFeedBool: false,\r\n      FetchSubcomments: false,\r\n      GetPostsByDESO: false,\r\n      GetPostsForFollowFeed: false,\r\n      GetPostsForGlobalWhitelist: true,\r\n      MediaRequired: false,\r\n      NumToFetch: 5000,\r\n      OrderBy: \"\",\r\n      PostContent: \"\",\r\n      PostHashHex: \"\",\r\n      PostsByDESOMinutesLookback: 0,\r\n      ReaderPublicKeyBase58Check:\r\n        \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\",\r\n      StartTstampSecs: null,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result?.data?.PostsFound?.map((post) => post.PostHashHex);\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n\r\n  async transferNft(publicKey, postHashHex) {\r\n    const path = \"/v0/transfer-nft\";\r\n    const data = {\r\n      MinFeeRateNanosPerKB: 1000,\r\n      NFTPostHashHex: postHashHex,\r\n      ReceiverPublicKeyBase58Check:\r\n        \"BC1YLh9EQ1Lv38dswCDvxSFEEMHH7LKv2jocWwHTcvUx5ck4zuTVhGF\",\r\n      SenderPublicKeyBase58Check: publicKey,\r\n      SerialNumber: 1,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async getNotifications(publicKey) {\r\n    const path = \"/v0/get-notifications\";\r\n    const data = {\r\n     PublicKeyBase58Check: publicKey,\r\n     FetchStartIndex : -1,\r\n     NumToFetch : 20,\r\n     FilteredOutNotificationCategories : {}\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n\r\n  async submitTransaction(signedTransactionHex) {\r\n    if (!signedTransactionHex) {\r\n      console.log(\"signedTransactionHex is required\");\r\n      return;\r\n    }\r\n\r\n    const path = \"/v0/submit-transaction\";\r\n    const data = {\r\n      TransactionHex: signedTransactionHex,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // async getUsersStateless(publicKeyList, skipForLeaderboard) {\r\n  //   if (!publicKeyList) {\r\n  //     console.log(\"publicKeyList is required\");\r\n  //     return;\r\n  //   }\r\n\r\n  //   const path = \"/v0/get-users-stateless\";\r\n  //   const data = {\r\n  //     PublicKeysBase58Check: publicKeyList,\r\n  //     SkipForLeaderboard: skipForLeaderboard,\r\n  //   };\r\n  //   try {\r\n  //     const result = await this.getClient().post(path, data);\r\n  //     return result.data;\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //     return null;\r\n  //   }\r\n  // }\r\n async createFollow(followerPublicKey, followedPublicKey){\r\n   const path=\"/v0/create-follow-txn-stateless\"\r\n   const data = {\r\n    FollowedPublicKeyBase58Check: followedPublicKey,\r\n    FollowerPublicKeyBase58Check: followerPublicKey,\r\n    IsUnfollow: false,\r\n    MinFeeRateNanosPerKB: 1000\r\n  };\r\n  try {\r\n    const result = await this.getClient().post(path, data);\r\n    return result.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return null;\r\n  }\r\n }\r\n  async getProfilesPartialMatch() {\r\n    const path = \"/v0/get-profiles\";\r\n    const data = {\r\n      NumToFetch: 100,\r\n      ReaderPublicKeyBase58Check: \"BC1YLiVd3t2XfDutMgVFPeShG3RiPGGrSa1qJ5b5f23sHyFAd2nrqU2\"\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n  async getUsersStateless(PublicKeysBase58Check) {\r\n    const path = \"/v0/get-users-stateless\";\r\n    const data = {\r\n      PublicKeysBase58Check: PublicKeysBase58Check,\r\n    };\r\n    try {\r\n      const result = await this.getClient().post(path, data);\r\n      return result.data;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getClient() {\r\n    if (client) return client;\r\n    client = axios.create({\r\n      baseURL: this.baseUrl,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    });\r\n    return client;\r\n  }\r\n}\r\n\r\nexport default DesoApi;\r\n"]},"metadata":{},"sourceType":"module"}